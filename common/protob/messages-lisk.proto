syntax = "proto2";
package hw.trezor.messages.lisk;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageLisk";

/**
 * Request: Ask device for Lisk address corresponding to address_n path
 * @start
 * @next LiskAddress
 * @next Failure
 */
message LiskGetAddress {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // Optionally show on display before sending the result
}

/**
 * Response: Contains Lisk address derived from device private seed
 * @end
 */
message LiskAddress {
    required string address = 1;    // Lisk address
}

/**
 * Request: Ask device for Lisk public key corresponding to address_n path
 * @start
 * @next LiskPublicKey
 */
message LiskGetPublicKey {
    repeated uint32 address_n = 1;  // BIP-32 path to derive the key from master node
    optional bool show_display = 2; // Optionally show on display before sending the result
}

/**
 * Response: Contains Lisk public key derived from device private seed
 * @end
 */
message LiskPublicKey {
    required bytes public_key = 1;  // Lisk public key
}

/**
 * Request: Ask device to sign Lisk transaction
 * @start
 * @next LiskSignedTx
 * @next Failure
 */
message LiskSignTx {
    repeated uint32 address_n = 1;          // BIP-32 path to derive the key from master node
    required bytes networkIdentifier = 2;   // Lisk network identifier
    required bytes transaction = 3;         // Lisk transaction structure

    /**
     * Structure representing the common part for Lisk transactions
     */
    message LiskTransaction {
        required LiskTransactionModuleID module_id = 1;
        required uint32 asset_id = 2;
        required uint64 nonce = 3;
        required uint64 fee = 4;
        required bytes sender_public_key = 5;
        optional bytes asset = 6; // It will be decoded later

        /**
         * Type of module id
         */
         enum LiskTransactionModuleID {
            Token = 2;
            Multisignature = 4;
            Dpos = 5;
            Legacy = 1000;
        }

        /**
         * Asset: Transfer (module_id = 2, asset_id = 0)
         */
        message LiskAssetTransfer {
            required uint64 amount = 1;
            required bytes recipient_address = 2;
            required string data = 3;
        }

        /**
         * Asset: RegisterMultisig (module_id = 4, asset_id = 0)
         */
        message LiskAssetRegisterMultisig {
            required uint32 number_of_signatures = 1;
            repeated bytes mandatory_keys = 2;
            repeated bytes optional_keys = 3;
        }

        /**
         * Asset: RegisterDelegate (module_id = 5, asset_id = 0)
         */
        message LiskAssetRegisterDelegate {
            required string username = 1;
        }

        /**
         * Asset: VoteDelegate (module_id = 5, asset_id = 1)
         */
        message LiskAssetVoteDelegate {
            repeated LiskVote votes = 1;

            message LiskVote {
                required bytes delegate_address = 1;
                required sint64 amount = 2;
            }
        }

        /**
         * Asset: UnlockToken (module_id = 5, asset_id = 2)
         */
        message LiskAssetUnlockToken {
            repeated LiskUnlock unlock_objects = 1;

            message LiskUnlock {
                required bytes delegate_address = 1;
                required uint64 amount = 2;
                required uint32 unvote_height = 3;
            }
        }

        /**
         * Asset: ReclaimLisk (module_id = 1000, asset_id = 0)
         */
         message LiskAssetReclaimLisk {
            required uint64 amount = 1;
        }
    }
}

/**
 * Response: Contains Lisk transaction signature
 * @end
 */
message LiskSignedTx {
    required bytes signature = 1;
}

/**
 * Request: Ask device to sign message
 * @start
 * @next LiskMessageSignature
 * @next Failure
 */
message LiskSignMessage {
    repeated uint32 address_n = 1;
    required bytes message = 2;
}

/**
 * Response: Signed message
 * @end
 */
message LiskMessageSignature {
    required bytes public_key = 1;
    required bytes signature = 2;
}

/**
 * Request: Ask device to verify message
 * @start
 * @next Success
 * @next Failure
 */
message LiskVerifyMessage {
    required bytes public_key = 1;
    required bytes signature = 2;
    required bytes message = 3;
}
